
@page "/transferMoney/{customerId}"

@using Data
@using FontesBank.Models
@using Microsoft.Extensions.Configuration
@inject NavigationManager NavigationManager
@inject IUserService _user
@inject IConfiguration _config
@inject ITransferService _transfer
@inject IJSRuntime JsRuntime



<br />
<br />

<h1 class="title">Transfer Money</h1>

<br />

<div class="row col-md-12">

        <div class="card col-md-6">
            <div class="card-body">
                <h4 class="card-title text-center"><b>From:</b></h4>
                <br />
                <p class="card-text"><b>Name: </b>@user.Name</p>
                <p class="card-text"><b>E-mail: </b>@user.Email</p>
                <p class="card-text"><b>Birth Date: </b>@(user.BirthDate.ToString("dd/MM/yyyy"))</p>
                <p class="card-text"><b>Address: </b>@user.Address</p>
                <p class="card-text"><b>Current Balance: </b>@string.Format("{0:C}", user.CurrentBalance)</p>
            </div>
        </div>

    <div class="card col-md-6">
        <br />
        <h4 class="card-title text-center"><b>Transfer Details</b></h4>
        <EditForm Model="user">
            <br />
            <div class="form-group row">
                <label for="firstName" class="col-sm-2 col-form-label">
                    <b>Name: </b>
                </label>
                <div class="col-sm-10">
                    <InputSelect Model="user" id="id" class="form-control" @bind-Value="transfer.UserToId">
                        <option value="null">-- Select -- </option>
                        *@foreach (var cnt in users)
                        {
                            <option value="@cnt.Id">@cnt.Name </option>
                        }
                    </InputSelect>

                </div>
            </div>

            <div class="form-group row">
                <label for="firstName" class="col-sm-2 col-form-label">
                    <b>Amount: </b>
                </label>
                <div class="col-sm-10">
                    <InputText id="amount" class="form-control" placeholder="0,00" type="number"
                               @bind-Value="transfer.Amount" />
                </div>
            </div>

            <button type="button" class="btn btn-primary" @onclick="() => Transfers()">
                Transfer Money
            </button>


            @if (errorMessage != "")
            {
                <br />
                <br />
                <div class="alert alert-danger text-center" role="alert">
                    @errorMessage
                </div>
            }
        </EditForm>




    </div>
</div>






@code {

    TransferModel transfer = new TransferModel();
    UserModel user;
    List<UserModel> users;
    string errorMessage = "";

    [Parameter]
    public string CustomerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        users = await _user.GetUsers();
        user = await _user.GetUserById(int.Parse(CustomerId));


        transfer.UserFromId = CustomerId;
    }


    protected async Task Transfers()
    {
        if (transfer.UserToId == null)
        {
            errorMessage = "Please select the user to send the amount";
        }
        else if
           (transfer.UserFromId == transfer.UserToId)
        {
            errorMessage = "The recipient must be different from the sender.";
        }
        else if (transfer.Amount == null || transfer.Amount == "0")
        {
            errorMessage = "The amount needs to be entered.";
        }
        else if (user.CurrentBalance < float.Parse(transfer.Amount))
        {
            errorMessage = "The currente balance is lower then amout value.";
        }
        else
        {
            await _transfer.SaveTransfer(transfer);
            await _user.UpdateAmount(transfer);
            await JsRuntime.InvokeVoidAsync("alert", "Your transfer has been done successfully!"); // Alert
            NavigationManager.NavigateTo("/customers");
        }



    }

}




