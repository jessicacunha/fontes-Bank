@page "/transferMoney/{customerId}"

@using Data
@using FontesBank.Models
@using Microsoft.Extensions.Configuration
@inject NavigationManager NavigationManager
@inject IUserService _user
@inject IConfiguration _config
@inject ITransferService _transfer
@inject IJSRuntime JsRuntime

<h1>Transaction</h1>

<h3>From:</h3>

<h2><b>@user.Name</b></h2>


<EditForm Model="user">
    <div class="form-group row">


        <label class="col-sm-2 col-form-label">
            To:
        </label>
        <div class="col-sm-10">
            <InputSelect Model="user" id="id" @bind-Value="transfer.UserToId">
                <option value="null">-- Select -- </option>
                *@foreach (var cnt in users)
                {
                    <option value="@cnt.Id">@cnt.Name </option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label for="firstName" class="col-sm-2 col-form-label">
            Amount:
        </label>
        <div class="col-sm-10">
            <InputText id="amount" class="form-control" placeholder="0,00" type="number"
                       @bind-Value="transfer.Amount" />
        </div>
    </div>
</EditForm>


<button type="button" class="btn btn-primary" @onclick="() => Transfers()">
    Transfer Money
</button>

@if (errorMessage != "")
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}


@code {

    TransferModel transfer = new TransferModel();
    UserModel user;
    List<UserModel> users;
    string errorMessage = "";

    [Parameter]
    public string CustomerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        users = await _user.GetUsers();
        user = await _user.GetUserById(int.Parse(CustomerId));


        transfer.UserFromId = CustomerId;
    }


    protected async Task Transfers()
    {
        if (transfer.UserToId == null)
        {
            errorMessage = "Please select the user to send the amount";
        }
        else if
           (transfer.UserFromId == transfer.UserToId)
        {
            errorMessage = "The recipient must be different from the sender.";
        }
        else if (transfer.Amount == null || transfer.Amount == "0")
        {
            errorMessage = "The amount needs to be entered.";
        }
        else if (user.CurrentBalance < float.Parse(transfer.Amount))
        {
            errorMessage = "The currente balance is lower then amout value.";
        }
        else
        {
            await _transfer.SaveTransfer(transfer);
            await _user.UpdateAmount(transfer);
            await JsRuntime.InvokeVoidAsync("alert", "Your transfer has been done successfully!"); // Alert
            NavigationManager.NavigateTo("/customers");
        }



    }

}




