@page "/customers/{customerId}"


@using Data
@using FontesBank.Models
@using Microsoft.Extensions.Configuration
@inject NavigationManager NavigationManager
@inject IUserService _user
@inject IConfiguration _config
@inject ITransferService _transfer




<h3>CustomerDetails</h3>

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="card col-md-4">
            <div class="card-body">
                <h4 class="card-title"><b>@user.Name</b></h4>
                <p class="card-text"><b>E-mail: </b>@user.Email</p>
                <p class="card-text"><b>Birth Date: </b>@user.BirthDate</p>
                <p class="card-text"><b>Address: </b>@user.Address</p>
                <p class="card-text"><b>Current Balance: </b>@user.CurrentBalance</p>

            </div>

            <button type="button" class="btn btn-primary" @onclick="() => TransferMoney(user.Id)">
                Transfer Money
            </button>
        </div>

        <div class="card col-md-4">
            <div class="card-body">
                <h4 class="card-title"><b>Transaction History</b></h4>
                <div class="col-md-8">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Action </th>
                                <th scope="col">Customer</th>
                                <th scope="col">Amount</th>
                                <th scope="col">Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var dtls in transfers)
                            {
                                <tr>
                                    <td>@(dtls.UserFromId == CustomerId ? "From": "To") </td>
                                    <td>@dtls.UserName</td>
                                    <td>@dtls.Amount</td>
                                    <td>@dtls.Date</td>

                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>


}

@code {

    UserModel user;
    List<UserModel> users;
    List<TransferModel> transfers;

    [Parameter]
    public string CustomerId { get; set; }

    protected override async Task OnInitializedAsync()
    {

        users = await _user.GetUsers();
        user = await _user.GetUserById(int.Parse(CustomerId));
        transfers = await _transfer.GetTransferById(int.Parse(CustomerId));
    }

    private void TransferMoney(int id)
    {
        NavigationManager.NavigateTo("transferMoney/" + id);
    }

}


